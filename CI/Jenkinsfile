pipeline {
    agent any

    environment {
        DOCKERHUB_CREDS=credentials('dockerhub_creds')
        LC_ALL = "en_US.UTF-8"
        LANG    = "en_US.UTF-8"
        LANGUAGE = "en_US.UTF-8"
        GITHUB_SSH_CREDS=credentials('github_bigdata2024_itmo')
        PATH = "/var/lib/jenkins/.local/bin:${env.PATH}"
        COMPOSE_SECRETS = credentials('COMPOSE_SECRETS')
    }

    stages {
        stage('Cloning github-repository'){
            steps{
                echo "====[STAGE1]===="
                cleanWs()
                sh "ssh-agent bash -c 'ssh-add $GITHUB_SSH_CREDS; git clone -b main git@github.com:Dzigen/BigData2024_ITMO_lab4.git'"
                sh 'cd BigData2024_ITMO_lab4/modelapi && dvc pull models/prod_model.pkl'
                sh 'mkdir BigData2024_ITMO_lab4/modelapi/logs BigData2024_ITMO_lab4/kafka_db_connector/logs/'
                sh 'docker --version && docker-compose --version && dvc --version && ansible --version && ansible-vault --version'
            }
        }
        
        stage('Building ModelAPI-image') {
            steps {
                echo "====[STAGE2]===="
                sh 'echo  $DOCKERHUB_CREDS_PSW | docker login -u $DOCKERHUB_CREDS_USR --password-stdin'
                sh 'docker pull dzigen/base_model_api:v1'
                sh 'cd BigData2024_ITMO_lab4 && cat $COMPOSE_SECRETS > .env'
                sh 'cd BigData2024_ITMO_lab4 && docker-compose build --no-cache modelapi'
            }
        }

        stage('Building Connector-image') {
            steps {
                echo "====[STAGE2]===="
                sh 'cd BigData2024_ITMO_lab4 && docker-compose build --no-cache kafkadb_connector'
            }
        }

        stage('Test run of ModelAPI-service') {
            steps {
                echo "====[STAGE3]===="
                sh 'cd BigData2024_ITMO_lab4/ && docker-compose up -d modelapi'
            }
        }

        stage('Push ModelAPI- and Connector-images to DockerHub') {
            steps {
                echo "====[STAGE4]===="
                sh 'docker push dzigen/model_api:v1'
                sh 'docker push dzigen/kafkadb_connector:v1'
            }
        }
    }

    post {
        always {
            sh 'docker stop modelapi_cntname && docker rm modelapi_cntname'
            sh 'docker stop kafkadb_conn_cntname && docker rm kafkadb_conn_cntname'
            sh 'docker stop kafka_cntname && docker rm kafka_cntname'
            sh 'docker stop zookeeper_cntname && docker rm zookeeper_cntname'
            sh 'docker stop mongodb_cntname && docker rm mongodb_cntname'
            sh 'docker logout'
            cleanWs()
        }
    }
}        